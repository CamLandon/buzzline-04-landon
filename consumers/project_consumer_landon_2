"""
project_consumer_avg_sentiment.py

Consumes JSON messages from a Kafka topic (or file) and visualizes the average sentiment score for each category over time using a real-time line chart.
"""

#####################################
# Import Modules
#####################################

import os
import json
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import defaultdict, deque
from kafka import KafkaConsumer  # Uncomment if using Kafka

# Choose source: 'file' or 'kafka'
SOURCE = 'file'  # Change to 'kafka' if using Kafka

# File path if using file-based streaming
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_FILE = os.path.join(PROJECT_ROOT, "data", "project_live.json")

# Kafka settings
KAFKA_TOPIC = "buzzline-topic"
KAFKA_SERVER = "localhost:9092"

# Rolling window size
WINDOW_SIZE = 20

# Store sentiment values for each category
timestamps = deque(maxlen=WINDOW_SIZE)
category_sentiments = defaultdict(lambda: deque(maxlen=WINDOW_SIZE))
category_counts = defaultdict(lambda: deque(maxlen=WINDOW_SIZE))

# Set up plot
fig, ax = plt.subplots()
ax.set_ylim(0, 1)  # Sentiment ranges from 0 to 1
ax.set_xlim(0, WINDOW_SIZE)
ax.set_title("Average Sentiment Score per Category Over Time")
ax.set_xlabel("Message Index")
ax.set_ylabel("Average Sentiment")

category_lines = {}
ax.legend()

# Read data (Kafka or File)
def get_messages():
    if SOURCE == "kafka":
        consumer = KafkaConsumer(
            KAFKA_TOPIC,
            bootstrap_servers=KAFKA_SERVER,
            value_deserializer=lambda x: json.loads(x.decode("utf-8"))
        )
        for message in consumer:
            yield message.value
    else:  # Read from file
        with open(DATA_FILE, "r") as f:
            for line in f:
                yield json.loads(line.strip())

# Update function for animation
def update(frame):
    try:
        message = next(data_stream)  # Get next message
        category = message.get("category", "unknown")
        sentiment = message.get("sentiment", 0)
        timestamps.append(len(timestamps))  # Just using an index for x-axis
        
        # Ensure category is initialized
        if category not in category_sentiments:
            category_sentiments[category] = deque([0] * WINDOW_SIZE, maxlen=WINDOW_SIZE)
            category_counts[category] = deque([0] * WINDOW_SIZE, maxlen=WINDOW_SIZE)

        # Update sentiment and count for the category
        category_sentiments[category].append(category_sentiments[category][-1] + sentiment)
        category_counts[category].append(category_counts[category][-1] + 1)

        # Compute average sentiment for each category
        avg_sentiments = {}
        for cat in category_sentiments:
            avg_sentiments[cat] = [category_sentiments[cat][i] / category_counts[cat][i] if category_counts[cat][i] > 0 else 0 
                                   for i in range(len(category_sentiments[cat]))]

        # Clear and update plot
        ax.clear()
        ax.set_title("Average Sentiment Score per Category Over Time")
        ax.set_xlabel("Message Index")
        ax.set_ylabel("Average Sentiment")
        ax.set_xlim(max(0, len(timestamps) - WINDOW_SIZE), len(timestamps))

        for cat, avg_vals in avg_sentiments.items():
            if len(timestamps) == len(avg_vals):
                ax.plot(list(timestamps), avg_vals, label=cat)
        
        ax.legend()
    
    except StopIteration:
        pass  # No more data

# Start data stream
data_stream = get_messages()

# Animate
ani = animation.FuncAnimation(fig, update, interval=1000, cache_frame_data=False)
plt.show()
